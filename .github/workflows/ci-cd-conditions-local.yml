name: CI-CD-CONDITIONS-LOCAL
on:
  workflow_dispatch:
    inputs:
      product:
        description: 'Product name'
        required: true
        type: string
      template:
        description: 'Template name'
        required: true
        type: string

env:
  PRODUCT: ${{ inputs.product }}
  TEMPLATE: ${{ inputs.template }}
  REGISTRY: ghcr.io
  ACTOR: saman-core
  IMAGE_APP_NAME: conditions-${{ inputs.product }}-${{ inputs.template }}
  APP_NAME: conditions-${{ inputs.product }}-${{ inputs.template }}
  MIN_SCALE: 1

jobs:
  build_contenizer:
    name: Build & Contenerize App
    runs-on: ubuntu-latest

    steps:
      - name: Log inputs
        run: |
          echo "Product: $PRODUCT"
          echo "Template: $TEMPLATE"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout product-repository
        uses: actions/checkout@v4
        with:
          repository: saman-core/product-repository
          path: product-repository

      - name: Set env DEPLOY_HASH
        run: |
          cd product-repository/
          echo "DEPLOY_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          cd ..

      - name: Log DEPLOY_HASH
        run: |
          echo "DEPLOY_HASH: $DEPLOY_HASH"

      - name: Copy files
        run: |
          cp product-repository/products/$(echo $PRODUCT)/templates/$(echo $TEMPLATE)/conditions/* ./src/main/resources/
          ls src/main/resources/

      - name: Setup graalvm
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'mandrel'
          github-token: ${{ secrets.GIT_TOKEN }}
          native-image-job-reports: 'true'
          version: '22.3.3.1-Final'

      - name: Set settings.xml
        env:
          SETTINGS_XML: ${{ secrets.SETTINGS_XML }}
          TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          base64 -d -i <<<$(echo $SETTINGS_XML) > settings.xml
          sed -i -e 's/OWNER/${{ env.ACTOR }}/g' -e 's/TOKEN/${{ env.TOKEN }}/g' ./settings.xml

      - name: Build native app
        run: |
          ./mvnw -s ./settings.xml package -Dnative -DskipTests

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.ACTOR }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Container app build and push
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./src/main/docker/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.ACTOR }}/${{ env.IMAGE_APP_NAME }}:${{ env.DEPLOY_HASH }}

      - name: Set Kubectl
        uses: azure/setup-kubectl@v4

      - name: Set config file
        env:
          BASE64: ${{ secrets.ENV_FILE_LOCAL }}
        run: |
          base64 -d -i <<<$(echo $BASE64) >> .env
          sed -i 's/=/: /' .env
          sed -i 's/^/  /' .env
          sed -i 's/APP_NAME/${{ env.APP_NAME }}/g' ./src/main/kubernetes/deploy-secret.yml
          cat .env >> ./src/main/kubernetes/deploy-secret.yml

      - name: Set Kubeconfig file and deploy app to K8S
        env:
          BASE64: ${{ secrets.KUBE_CONFIG }}
        run: |
          base64 -d -i <<<$(echo $BASE64) > ./kubeconfig
          export KUBECONFIG=./kubeconfig
          sed -i -e 's/CONTAINER_IMAGE/${{ env.REGISTRY }}\/${{ env.ACTOR }}\/${{ env.IMAGE_APP_NAME }}:${{ env.DEPLOY_HASH }}/g' -e 's/APP_VERSION/${{ github.run_number }}/g' -e 's/APP_NAME/${{ env.APP_NAME }}/g' -e 's/DEPLOY_HASH/${{ env.DEPLOY_HASH }}/g' -e 's/MIN_SCALE/${{ env.MIN_SCALE }}/g' ./src/main/kubernetes/deployment-local.yml
          kubectl apply -f ./src/main/kubernetes/deploy-secret.yml -n api --insecure-skip-tls-verify
          kubectl delete -f ./src/main/kubernetes/deployment-local.yml -n api --insecure-skip-tls-verify || true
          kubectl apply -f ./src/main/kubernetes/deployment-local.yml -n api --insecure-skip-tls-verify
